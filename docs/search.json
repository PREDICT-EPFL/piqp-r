[{"path":"/articles/piqp.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"PIQR Solver Example","text":"PIQP solves quadratic programs form \\[ \\begin{aligned} \\min_{x} \\quad & \\frac{1}{2} x^\\top P x + c^\\top x \\\\ \\text {s.t.}\\quad & Ax=b, \\\\ & Gx \\leq h, \\\\ & x_{lb} \\leq x \\leq x_{ub} \\end{aligned} \\] primal decision variables \\(x \\\\mathbb{R}^n\\), matrices \\(P\\\\mathbb{S}_+^n\\), \\(\\\\mathbb{R}^{p \\times n}\\), \\(G \\\\mathbb{R}^{m \\times n}\\), vectors \\(c \\\\mathbb{R}^n\\), \\(b \\\\mathbb{R}^p\\), \\(h \\\\mathbb{R}^m\\), \\(x_{lb} \\\\mathbb{R}^n\\), \\(x_{ub} \\\\mathbb{R}^n\\).","code":""},{"path":"/articles/piqp.html","id":"the-problem-solver-interface","dir":"Articles","previous_headings":"","what":"2. The Problem Solver Interface","title":"PIQR Solver Example","text":"Consider: \\[ \\begin{aligned} \\min_{x} \\quad & \\frac{1}{2} x^\\top \\begin{bmatrix} 6 & 0 \\\\ 0 & 4 \\end{bmatrix} x + \\begin{bmatrix} -1 \\\\ -4 \\end{bmatrix}^\\top x \\\\ \\text {s.t.}\\quad & \\begin{bmatrix} 1 & -2 \\end{bmatrix} x = 1, \\\\ & \\begin{bmatrix} 1 & -1 \\\\ 2 & 0 \\end{bmatrix} x \\leq \\begin{bmatrix} 0.2 \\\\ -1 \\end{bmatrix}, \\\\ & -1 \\leq x_1 \\leq 1. \\end{aligned} \\] data problem can specified . problem can now solved via call solve_piqp(). sol contains many components str(sol) display important ones : status : 1 goes well (), x : solution vector y : dual solution equality constraints z : dual solution inequality constraints z_lb : dual solution lower bound box constraints z_ub : dual solution upper bound box constraints info$status_desc: descriptive string status info$primal_pobj : primal objective value info$run_time : total runtime, asked settings (see ). One can always construct descriptive string status using: Note PIQP can handle infinite box constraints well, .e.Â elements \\(x_{lb}\\) \\(x_{ub}\\) \\(-\\infty\\) \\(\\infty\\), respectively. contrary, infinite values general inequalities \\(Gx \\leq h = \\pm \\infty\\) can cause problems, .e., converted internally -1e30 1e30, respectively.","code":"P <- matrix(c(6, 0, 0, 4), nrow = 2) c <- c(-1, -4) A <- matrix(c(1, -2), nrow = 1) b <- 1 G <- matrix(c(1, 2, -1, 0), nrow = 2) h <- c(0.2, -1) x_lb <- c(-1, -Inf)  ## 2 variables x_ub <- c(1, Inf)    ## 2 variables sol <- solve_piqp(P, c, A, b, G, h, x_lb = x_lb, x_ub = x_ub, backend = \"auto\") cat(sprintf(\"(Solution status, description): = (%d, %s)\\n\",             sol$status, sol$info$status_desc)) #> (Solution status, description): = (1, solved) cat(sprintf(\"Objective: %f, solution: (x1, x2) = (%f, %f)\\n\", sol$info$primal_obj, sol$x[1], sol$x[2])) #> Objective: 6.160000, solution: (x1, x2) = (-0.600000, -0.800000) status_description(sol$status) #> [1] \"Solver solved problem up to given tolerance.\""},{"path":"/articles/piqp.html","id":"the-solver-model-object","dir":"Articles","previous_headings":"","what":"3. The Solver Model Object","title":"PIQR Solver Example","text":"Users wish solve QP problems mostly use solve_piqp() function. Behind scenes, solve_piqp() creates solver object calls methods object obtain solution. solver object can created explitly using piqp() provides elaborate facilities updating problem data. can efficient one solving kind problem . problem solved using solver model object thus: Indeed, exactly solve_piqp() . interface allows us update settings, bounds, etc. resolve problem efficiently. Setting lower bounds made problem infeasible. error message correctly indicates b wrong dimensions. methods exposed model object can seen documentation object piqp_model. example, query problem dimensions.","code":"model <- piqp(P, c, A, b, G, h, x_lb = x_lb, x_ub = x_ub) sol2 <- model$solve() identical(sol, sol2) #> [1] TRUE model$update(x_lb = c(0, 0)) sol3 <- model$solve() cat(sprintf(\"(Solution status, description): = (%d, %s)\\n\",             sol3$status, status_description(sol3$status))) #> (Solution status, description): = (-2, The problem is primal infeasible.) ## Try to give an inappropriate b value model$update(b = c(5, 2)) #> Error in model$update(b = c(5, 2)): Update parameters not match original problem dimensions model$get_dims() #> $n #> [1] 2 #>  #> $p #> [1] 1 #>  #> $m #> [1] 2"},{"path":"/articles/piqp.html","id":"dense-and-sparse-interfaces","dir":"Articles","previous_headings":"","what":"3. Dense and Sparse Interfaces","title":"PIQR Solver Example","text":"PIQP supports dense sparse problem formulations. small dense problems dense interface preferred since vectorized instructions cache locality can exploited efficiently, sparse problems sparse interface result significant speedups. Either interface can requested explicitly via backend parameter can take value among \"dense\", \"sparse\", \"auto\", default. last value automatically switch sparse interface supplied inputs (\\(\\), \\(P\\), \\(G\\)) sparse matrix; otherwise uses dense interface.","code":"sparse_sol <- solve_piqp(P, c, A, b, G, h, x_lb, x_ub, backend = \"sparse\") str(sparse_sol) #> List of 15 #>  $ status: int 1 #>  $ x     : num [1:2] -0.6 -0.8 #>  $ y     : num -11.8 #>  $ z     : num [1:2] 1.64e+01 1.01e-08 #>  $ z_lb  : num [1:2] 5.61e-10 0.00 #>  $ z_ub  : num [1:2] 3.2e-10 0.0 #>  $ s     : num [1:2] 5.19e-11 2.00e-01 #>  $ s_lb  : num [1:2] 0.4 Inf #>  $ s_ub  : num [1:2] 1.6 Inf #>  $ zeta  : num [1:2] -0.6 -0.8 #>  $ lambda: num -11.8 #>  $ nu    : num [1:2] 1.64e+01 1.01e-08 #>  $ nu_lb : num [1:2] 5.61e-10 0.00 #>  $ nu_ub : num [1:2] 3.2e-10 0.0 #>  $ info  :List of 24 #>   ..$ status_desc     : chr \"solved\" #>   ..$ iter            : num 6 #>   ..$ rho             : num 1e-10 #>   ..$ delta           : num 1e-10 #>   ..$ mu              : num 9.01e-10 #>   ..$ sigma           : num 1e-06 #>   ..$ primal_step     : num 0.99 #>   ..$ dual_step       : num 0.99 #>   ..$ primal_inf      : num 4.44e-11 #>   ..$ primal_rel_inf  : num 1.6 #>   ..$ dual_inf        : num 8.11e-10 #>   ..$ dual_rel_inf    : num 7.2 #>   ..$ primal_obj      : num 6.16 #>   ..$ dual_obj        : num 6.16 #>   ..$ duality_gap     : num 3.88e-09 #>   ..$ duality_gap_rel : num 11.8 #>   ..$ factor_retires  : num 0 #>   ..$ reg_limit       : num 1e-10 #>   ..$ no_primal_update: num 0 #>   ..$ no_dual_update  : num 0 #>   ..$ setup_time      : num 0 #>   ..$ update_time     : num 0 #>   ..$ solve_time      : num 0 #>   ..$ run_time        : num 0"},{"path":"/articles/piqp.html","id":"another-example","dir":"Articles","previous_headings":"","what":"5. Another Example","title":"PIQR Solver Example","text":"Suppose want solve following 2-dimensional quadratic programming problem: \\[ \\begin{array}{ll} \\text{minimize} &  3x_1^2 + 2x_2^2 - x_1 - 4x_2\\\\ \\text{subject } &  -1 \\leq x \\leq 1, ~ x_1 = 2x_2 \\end{array} \\] Since solver expects objective form \\(\\frac{1}{2}x^\\top P x + c^\\top x\\), define \\[ P = 2 \\cdot \\begin{bmatrix} 3 & 0 \\\\ 0 & 2\\end{bmatrix} \\mbox{ } q = \\begin{bmatrix} -1 \\\\ -4\\end{bmatrix}. \\] one equality constraint box constraints. leads following straight-forward formulation. can also choose move upper box constraints inequalities. can move inequalities. yield result.","code":"P <- matrix(2 * c(3, 0, 0, 2), nrow = 2, ncol = 2) c <- c(-1, -4) A <- matrix(c(1, -2), ncol = 2) b <- 0 x_lb <- rep(-1.0, 2) x_ub <- rep(1.0, 2) sol <- solve_piqp(P = P, c = c, A = A, b = b, x_lb = x_lb, x_ub = x_ub) cat(sprintf(\"(Solution status, description): = (%d, %s)\\n\",             sol$status, sol$info$status_desc)) #> (Solution status, description): = (1, solved) cat(sprintf(\"Objective: %f, solution: (x1, x2) = (%f, %f)\\n\", sol$info$primal_obj, sol$x[1], sol$x[2])) #> Objective: -0.642857, solution: (x1, x2) = (0.428571, 0.214286) G <- diag(2) h <- c(1, 1) sol <- solve_piqp(P = P, c = c, A = A, b = b, G = G, h = h,                   x_lb = c(-1, -1), x_ub = c(Inf, Inf)) cat(sprintf(\"(Solution status, description): = (%d, %s)\\n\",             sol$status, sol$info$status_desc)) #> (Solution status, description): = (1, solved) cat(sprintf(\"Objective: %f, solution: (x1, x2) = (%f, %f)\\n\", sol$info$primal_obj, sol$x[1], sol$x[2])) #> Objective: -0.642857, solution: (x1, x2) = (0.428571, 0.214286) G <- Matrix::Matrix(c(1, 0, -1, 0, 0, 1, 0, -1), byrow = TRUE,                     nrow = 4, sparse = TRUE) h <- rep(1, 4)  sol <- solve_piqp(A = A, b = b, c = c, P = P, G = G, h = h) cat(sprintf(\"(Solution status, description): = (%d, %s)\\n\",             sol$status, status_description(sol$status))) #> (Solution status, description): = (1, Solver solved problem up to given tolerance.) cat(sprintf(\"Objective: %f, solution: (x1, x2) = (%f, %f)\\n\", sol$info$primal_obj, sol$x[1], sol$x[2])) #> Objective: -0.642857, solution: (x1, x2) = (0.428571, 0.214286)"},{"path":"/articles/piqp.html","id":"solver-parameters","dir":"Articles","previous_headings":"","what":"5. Solver parameters","title":"PIQR Solver Example","text":"PIQP number parameters control behavior, including verbosity, tolerances, etc.; see help piqp_settings(). example, last problem, can reduce number iterations. Note different status, always checked code.","code":"s <- solve_piqp(P = P, c = c, A = A, b = b, G = G, h = h,           settings = list(max_iter = 3)) ## Reduced number of iterations cat(sprintf(\"(Solution status, description): = (%d, %s)\\n\",             s$status, s$info$status_desc)) #> (Solution status, description): = (-1, max iterations reached) cat(sprintf(\"Objective: %f, solution: (x1, x2) = (%f, %f)\\n\", s$info$primal_obj, s$x[1], s$x[2])) #> Objective: -0.642857, solution: (x1, x2) = (0.428294, 0.214147)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Balasubramanian Narasimhan. Author, maintainer. Roland Schwan. Author, copyright holder. Yuning Jiang. Author. Daniel Kuhn. Author. Colin N. Jones. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schwan R, Jiang Y, Kuhn D, Jones C (2023). âPIQP: Proximal Interior-Point Quadratic Programming Solver.â doi:10.48550/arXiv.2304.00290. Narasimhan B, Schwan R, Jiang Y, Kuhn D, Jones C (2023). âpiqp: R Interface Proximal Interior Point Quadratic Programming Solver.â","code":"@Misc{,   title = {PIQP: A Proximal Interior-Point Quadratic Programming Solver},   author = {Roland Schwan and Yuning Jiang and Daniel Kuhn and Colin N. Jones},   year = {2023},   doi = {10.48550/arXiv.2304.00290}, } @Misc{,   title = {piqp: R Interface to Proximal Interior Point Quadratic Programming Solver},   author = {Balasubramanian Narasimhan and Roland Schwan and Yuning Jiang and Daniel Kuhn and Colin N. Jones},   year = {2023}, }"},{"path":"/index.html","id":"piqp","dir":"","previous_headings":"","what":"R Interface to Proximal Interior Point Quadratic Programming Solver","title":"R Interface to Proximal Interior Point Quadratic Programming Solver","text":"R interface Proximal Interior Point Quadratic Programming solver EPFL.","code":""},{"path":"/reference/piqp-package.html","id":null,"dir":"Reference","previous_headings":"","what":"R Interface to PIQP Solver â piqp-package","title":"R Interface to PIQP Solver â piqp-package","text":"PIQP embedded Proximal Interior Point Quadratic Programming solver, can solve dense sparse quadratic programs https://doi.org/10.48550/arXiv.2304.00290. Combining infeasible interior point method proximal method multipliers, algorithm can handle ill-conditioned convex QP problems without need linear independence constraints. solver written header C++ 14 leveraging Eigen library vectorized linear algebra. small dense problems, vectorized instructions cache locality can exploited efficiently. Allocation free problem updates re-solves also provided.","code":""},{"path":"/reference/piqp-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R Interface to PIQP Solver â piqp-package","text":"Balasubramanian Narasimhan, Roland Schwan (C), Yuning Jiang, Daniel Kuhn, Colin N. Jones","code":""},{"path":"/reference/piqp.html","id":null,"dir":"Reference","previous_headings":"","what":"PIQP Solver object â piqp","title":"PIQP Solver object â piqp","text":"PIQP Solver object","code":""},{"path":"/reference/piqp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PIQP Solver object â piqp","text":"","code":"piqp(   P = NULL,   c = NULL,   A = NULL,   b = NULL,   G = NULL,   h = NULL,   x_lb = NULL,   x_ub = NULL,   settings = list(),   backend = c(\"auto\", \"sparse\", \"dense\") )"},{"path":"/reference/piqp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PIQP Solver object â piqp","text":"P dense sparse matrix class dgCMatrix coercible , must positive semidefinite c numeric vector dense sparse matrix class dgCMatrix coercible b numeric vector G dense sparse matrix class dgCMatrix coercible h numeric vector x_lb numeric vector lower bounds, default NULL indicating -Inf variables, otherwise number variables long x_ub numeric vector upper bounds, default NULL indicating Inf variables, otherwise number variables long settings list optimization parameters, empty default; see piqp_settings() comprehensive list parameters may used backend backend use, auto P, G sparse sparse backend used (\"auto\", \"sparse\" \"dense\") (\"auto\")","code":""},{"path":"/reference/piqp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PIQP Solver object â piqp","text":"R6-object class \"piqp_model\" methods defined can used solve problem updated settings / parameters.","code":""},{"path":"/reference/piqp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PIQP Solver object â piqp","text":"Allows one solve parametric problem example warm starts updates parameter, c.f. examples. object returned piqp contains several methods can used either update/get details problem, modify optimization settings attempt solve problem.","code":""},{"path":"/reference/piqp.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PIQP Solver object â piqp","text":"","code":"model = piqp(P = NULL, c = NULL, A = NULL, b = NULL, G = NULL, h = NULL, x_lb = NULL, x_ub = NULL, settings = piqp_settings(), backend = c(\"auto\", \"sparse\", \"dense\"))  model$solve() model$update(P = NULL, c = NULL, A = NULL, b = NULL, G = NULL, h = NULL, x_lb = NULL, x_ub = NULL) model$get_settings() model$get_dims() model$update_settings(new_settings = piqp_settings())  print(model)"},{"path":[]},{"path":"/reference/piqp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PIQP Solver object â piqp","text":"","code":"## example, adapted from PIQP documentation library(piqp) library(Matrix)  P <- Matrix(c(6., 0.,               0., 4.), 2, 2, sparse = TRUE) c <- c(-1., -4.) A <- Matrix(c(1., -2.), 1, 2, sparse = TRUE) b <- c(1.) G <- Matrix(c(1., 2., -1., 0.), 2, 2, sparse = TRUE) h <- c(0.2, -1.) x_lb <- c(-1., -Inf) x_ub <- c(1., Inf)  settings <- list(verbose = TRUE)  model <- piqp(P, c, A, b, G, h, x_lb, x_ub, settings)  # Solve res <- model$solve() #> ---------------------------------------------------------- #>                            PIQP                            #>                     (c) Roland Schwan                      #>    Ecole Polytechnique Federale de Lausanne (EPFL) 2023    #> ---------------------------------------------------------- #> sparse backend #> variables n = 2, nzz(P upper triangular) = 2 #> equality constraints p = 1, nnz(A) = 2 #> inequality constraints m = 2, nnz(G) = 3 #> variable lower bounds n_lb = 1 #> variable upper bounds n_ub = 1 #>  #> iter  prim_obj       dual_obj       duality_gap   prim_inf      dual_inf      rho         delta       mu          p_step   d_step #>   0    2.43682e+00   -2.58316e+00   5.01997e+00   2.22782e+00   2.07114e+01   1.000e-06   1.000e-04   1.068e+01   0.0000   0.0000 #>   1    6.54472e+00    3.11191e+00   3.43282e+00   2.20398e-02   2.07118e-01   8.792e-08   8.792e-06   9.387e-01   0.9900   0.9900 #>   2    6.11927e+00    5.84978e+00   2.69498e-01   4.47812e-03   5.52769e-02   6.007e-09   6.007e-07   6.414e-02   0.7962   0.9607 #>   3    6.16036e+00    6.15648e+00   3.87581e-03   4.43795e-05   8.10844e-04   1.000e-10   8.432e-09   9.003e-04   0.9900   0.9870 #>   4    6.16000e+00    6.15996e+00   3.87634e-05   4.43739e-07   8.10934e-06   1.000e-10   1.000e-10   9.007e-06   0.9900   0.9900 #>   5    6.16000e+00    6.16000e+00   3.87671e-07   4.43738e-09   8.10935e-08   1.000e-10   1.000e-10   9.008e-08   0.9900   0.9900 #>   6    6.16000e+00    6.16000e+00   3.87708e-09   4.43737e-11   8.10932e-10   1.000e-10   1.000e-10   9.008e-10   0.9900   0.9900 #>  #> status:               solved #> number of iterations: 6 #> objective:            6.16000e+00 res$x #> [1] -0.6 -0.8  # Define new data A_new <- Matrix(c(1., -3.), 1, 2, sparse = TRUE) h_new <- c(2., 1.)  # Update model and solve again model$update(A = A_new, h = h_new) res <- model$solve() #> ---------------------------------------------------------- #>                            PIQP                            #>                     (c) Roland Schwan                      #>    Ecole Polytechnique Federale de Lausanne (EPFL) 2023    #> ---------------------------------------------------------- #> sparse backend #> variables n = 2, nzz(P upper triangular) = 2 #> equality constraints p = 1, nnz(A) = 2 #> inequality constraints m = 2, nnz(G) = 3 #> variable lower bounds n_lb = 1 #> variable upper bounds n_ub = 1 #>  #> iter  prim_obj       dual_obj       duality_gap   prim_inf      dual_inf      rho         delta       mu          p_step   d_step #>   0    1.47500e+01   -2.00344e+02   2.15094e+02   8.99959e+00   9.45659e+01   1.000e-10   1.000e-10   2.067e+02   0.0000   0.0000 #>   1    2.19193e+00   -9.18795e+01   9.40714e+01   8.99959e-02   9.45657e-01   1.000e-10   1.000e-10   2.466e+01   0.9900   0.9900 #>   2    1.94403e+00   -2.40809e+00   4.35212e+00   8.99959e-04   5.47442e-02   1.000e-10   1.000e-10   1.089e+00   0.9900   0.9563 #>   3    1.05672e+00    5.35890e-01   5.20827e-01   8.99954e-06   5.48689e-04   1.000e-10   1.000e-10   1.302e-01   0.9900   0.9900 #>   4    9.63579e-01    9.18538e-01   4.50412e-02   8.99741e-08   4.99746e-06   1.000e-10   1.000e-10   1.126e-02   0.9900   0.9900 #>   5    9.57033e-01    9.53468e-01   3.56551e-03   8.91871e-10   1.69943e-07   1.000e-10   1.000e-10   8.914e-04   0.9900   0.9900 #>   6    9.56897e-01    9.56828e-01   6.90282e-05   7.56337e-12   4.20226e-09   1.000e-10   1.000e-10   1.726e-05   0.9900   0.9900 #>   7    9.56897e-01    9.56896e-01   6.89596e-07   5.49193e-14   2.38823e-10   1.000e-10   1.000e-10   1.724e-07   0.9900   0.9900 #>   8    9.56897e-01    9.56897e-01   6.89545e-09   4.54040e-16   5.93214e-12   1.000e-10   1.000e-10   1.724e-09   0.9900   0.9900 #>  #> status:               solved #> number of iterations: 8 #> objective:            9.56897e-01 res$x #> [1]  0.4310345 -0.1896552"},{"path":"/reference/piqp_model.html","id":null,"dir":"Reference","previous_headings":"","what":"The PIQP Solver Model Class â piqp_model","title":"The PIQP Solver Model Class â piqp_model","text":"class wraps around PIQP C++ Solver exposes methods fields C++ object. Users never need directly create instances class use user-friendly functions piqp() solve_piqp().","code":""},{"path":[]},{"path":"/reference/piqp_model.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"The PIQP Solver Model Class â piqp_model","text":"piqp_model$new() piqp_model$solve() piqp_model$update() piqp_model$get_settings() piqp_model$get_dims() piqp_model$update_settings() piqp_model$clone()","code":""},{"path":"/reference/piqp_model.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"The PIQP Solver Model Class â piqp_model","text":"Create new piqp_model object","code":""},{"path":"/reference/piqp_model.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The PIQP Solver Model Class â piqp_model","text":"","code":"piqp_model$new(   P,   c,   A,   b,   G,   h,   x_lb,   x_ub,   settings = list(),   dense_backend,   dims )"},{"path":"/reference/piqp_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The PIQP Solver Model Class â piqp_model","text":"P dense sparse matrix class dgCMatrix coercible , must positive semidefinite c numeric vector dense sparse matrix class dgCMatrix coercible b numeric vector G dense sparse matrix class dgCMatrix coercible h numeric vector x_lb numeric vector lower bounds x_ub numeric vector upper bounds settings list optimization parameters dense_backend flag indicating dense solver used dims dimensions problem, named list containing n, p m.","code":""},{"path":"/reference/piqp_model.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"The PIQP Solver Model Class â piqp_model","text":"piqp_model object can used solve QP","code":""},{"path":"/reference/piqp_model.html","id":"method-solve-","dir":"Reference","previous_headings":"","what":"Method solve()","title":"The PIQP Solver Model Class â piqp_model","text":"Solve QP model","code":""},{"path":"/reference/piqp_model.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"The PIQP Solver Model Class â piqp_model","text":"","code":"piqp_model$solve()"},{"path":"/reference/piqp_model.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"The PIQP Solver Model Class â piqp_model","text":"list containing solution","code":""},{"path":"/reference/piqp_model.html","id":"method-update-","dir":"Reference","previous_headings":"","what":"Method update()","title":"The PIQP Solver Model Class â piqp_model","text":"Update current piqp_model new data","code":""},{"path":"/reference/piqp_model.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"The PIQP Solver Model Class â piqp_model","text":"","code":"piqp_model$update(   P = NULL,   c = NULL,   A = NULL,   b = NULL,   G = NULL,   h = NULL,   x_lb = NULL,   x_ub = NULL )"},{"path":"/reference/piqp_model.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"The PIQP Solver Model Class â piqp_model","text":"P dense sparse matrix class dgCMatrix coercible , must positive semidefinite c numeric vector dense sparse matrix class dgCMatrix coercible b numeric vector G dense sparse matrix class dgCMatrix coercible h numeric vector x_lb numeric vector lower bounds x_ub numeric vector upper bounds settings list optimization parameters dense_backend flag indicating dense solver used dims dimensions problem, named list containing n, p m.","code":""},{"path":"/reference/piqp_model.html","id":"method-get-settings-","dir":"Reference","previous_headings":"","what":"Method get_settings()","title":"The PIQP Solver Model Class â piqp_model","text":"Obtain current settings model","code":""},{"path":"/reference/piqp_model.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"The PIQP Solver Model Class â piqp_model","text":"","code":"piqp_model$get_settings()"},{"path":"/reference/piqp_model.html","id":"method-get-dims-","dir":"Reference","previous_headings":"","what":"Method get_dims()","title":"The PIQP Solver Model Class â piqp_model","text":"Obtain dimensions model","code":""},{"path":"/reference/piqp_model.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"The PIQP Solver Model Class â piqp_model","text":"","code":"piqp_model$get_dims()"},{"path":"/reference/piqp_model.html","id":"method-update-settings-","dir":"Reference","previous_headings":"","what":"Method update_settings()","title":"The PIQP Solver Model Class â piqp_model","text":"Update current settings new values model","code":""},{"path":"/reference/piqp_model.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"The PIQP Solver Model Class â piqp_model","text":"","code":"piqp_model$update_settings(new_settings = list())"},{"path":"/reference/piqp_model.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"The PIQP Solver Model Class â piqp_model","text":"new_settings list named values settings, default empty list; see piqp_settings() comprehensive list defaults","code":""},{"path":"/reference/piqp_model.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"The PIQP Solver Model Class â piqp_model","text":"objects class cloneable method.","code":""},{"path":"/reference/piqp_model.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"The PIQP Solver Model Class â piqp_model","text":"","code":"piqp_model$clone(deep = FALSE)"},{"path":"/reference/piqp_model.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"The PIQP Solver Model Class â piqp_model","text":"deep Whether make deep clone.","code":""},{"path":"/reference/piqp_settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Settings parameters with default values and types in parenthesis â piqp_settings","title":"Settings parameters with default values and types in parenthesis â piqp_settings","text":"Settings parameters default values types parenthesis","code":""},{"path":"/reference/piqp_settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Settings parameters with default values and types in parenthesis â piqp_settings","text":"","code":"piqp_settings(   rho_init = 1e-06,   delta_init = 1e-04,   eps_abs = 1e-08,   eps_rel = 1e-09,   check_duality_gap = TRUE,   eps_duality_gap_abs = 1e-08,   eps_duality_gap_rel = 1e-09,   reg_lower_limit = 1e-10,   reg_finetune_lower_limit = 1e-13,   reg_finetune_primal_update_threshold = 7L,   reg_finetune_dual_update_threshold = 5L,   max_iter = 250L,   max_factor_retires = 10L,   preconditioner_scale_cost = FALSE,   preconditioner_iter = 10L,   tau = 0.99,   iterative_refinement_always_enabled = FALSE,   iterative_refinement_eps_abs = 1e-12,   iterative_refinement_eps_rel = 1e-12,   iterative_refinement_max_iter = 10L,   iterative_refinement_min_improvement_rate = 5,   iterative_refinement_static_regularization_eps = 1e-07,   iterative_refinement_static_regularization_rel = .Machine$double.eps^2,   verbose = FALSE,   compute_timings = FALSE )"},{"path":"/reference/piqp_settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Settings parameters with default values and types in parenthesis â piqp_settings","text":"rho_init Initial value primal proximal penalty parameter rho (default = 1e-6) delta_init Initial value augmented lagrangian penalty parameter delta (default = 1e-4) eps_abs Absolute tolerance (default = 1e-8) eps_rel Relative tolerance (default = 1e-9) check_duality_gap Check terminal criterion duality gap (default = TRUE) eps_duality_gap_abs Absolute tolerance duality gap (default = 1e-8) eps_duality_gap_rel Relative tolerance duality gap (default = 1e-9) reg_lower_limit Lower limit regularization (default = 1e-10) reg_finetune_lower_limit Fine tune lower limit regularization (default = 1e-13) reg_finetune_primal_update_threshold Threshold number primal updates transition fine tune mode (default = 7) reg_finetune_dual_update_threshold Threshold number dual updates transition fine tune mode (default = 5) max_iter Maximum number iterations (default = 250) max_factor_retires Maximum number factorization retires failure (default = 10) preconditioner_scale_cost Scale cost Ruiz preconditioner (default = FALSE) preconditioner_iter Maximum preconditioner iterations (default = 10) tau Maximum interior point step length (default = 0.99) iterative_refinement_always_enabled Always run iterative refinement factorization failure (default = FALSE) iterative_refinement_eps_abs Iterative refinement absolute tolerance (default = 1e-12) iterative_refinement_eps_rel Iterative refinement relative tolerance (default = 1e-12) iterative_refinement_max_iter Maximum number iterations iterative refinement (default = 10) iterative_refinement_min_improvement_rate Minimum improvement rate iterative refinement (default = 5.0) iterative_refinement_static_regularization_eps Static regularization KKT system iterative refinement (default = 1e-7) iterative_refinement_static_regularization_rel Static regularization w.r.t. maximum abs diagonal term KKT system. (default = .Machine$double.eps^2) verbose Verbose printing (default = FALSE) compute_timings Measure timing information internally (default = FALSE)","code":""},{"path":"/reference/piqp_settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Settings parameters with default values and types in parenthesis â piqp_settings","text":"list containing settings parameters.","code":""},{"path":"/reference/solve_piqp.html","id":null,"dir":"Reference","previous_headings":"","what":"PIQP Solver â solve_piqp","title":"PIQP Solver â solve_piqp","text":"Solves $$arg\\min_x 0.5 x'P x + c'x$$ s.t. $$x = b$$ $$G x \\leq h$$ $$x_{lb} \\leq x \\leq x_{ub}$$ real matrices P (nxn, positive semidefinite), (pxn) m number equality constraints, G (mxn) m number inequality constraints","code":""},{"path":"/reference/solve_piqp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PIQP Solver â solve_piqp","text":"","code":"solve_piqp(   P = NULL,   c = NULL,   A = NULL,   b = NULL,   G = NULL,   h = NULL,   x_lb = NULL,   x_ub = NULL,   settings = list(),   backend = c(\"auto\", \"sparse\", \"dense\") )"},{"path":"/reference/solve_piqp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PIQP Solver â solve_piqp","text":"P dense sparse matrix class dgCMatrix coercible , must positive semidefinite c numeric vector dense sparse matrix class dgCMatrix coercible b numeric vector G dense sparse matrix class dgCMatrix coercible h numeric vector x_lb numeric vector lower bounds, default NULL indicating -Inf variables, otherwise number variables long x_ub numeric vector upper bounds, default NULL indicating Inf variables, otherwise number variables long settings list optimization parameters, empty default; see piqp_settings() comprehensive list parameters may used backend backend use, auto P, G sparse sparse backend used (\"auto\", \"sparse\" \"dense\") (\"auto\")","code":""},{"path":"/reference/solve_piqp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PIQP Solver â solve_piqp","text":"list elements solution elements","code":""},{"path":"/reference/solve_piqp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PIQP Solver â solve_piqp","text":"Schwan, R., Jiang, Y., Kuhn, D., Jones, C.N. (2023). ``PIQP: Proximal Interior-Point Quadratic Programming Solver.'' doi:10.48550/arXiv.2304.00290","code":""},{"path":[]},{"path":"/reference/solve_piqp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PIQP Solver â solve_piqp","text":"","code":"## example, adapted from PIQP documentation library(piqp) library(Matrix)  P <- Matrix(c(6., 0.,               0., 4.), 2, 2, sparse = TRUE) c <- c(-1., -4.) A <- Matrix(c(1., -2.), 1, 2, sparse = TRUE) b <- c(1.) G <- Matrix(c(1., 2., -1., 0.), 2, 2, sparse = TRUE) h <- c(0.2, -1.) x_lb <- c(-1., -Inf) x_ub <- c(1., Inf)  settings <- list(verbose = TRUE)  # Solve with PIQP res <- solve_piqp(P, c, A, b, G, h, x_lb, x_ub, settings) #> ---------------------------------------------------------- #>                            PIQP                            #>                     (c) Roland Schwan                      #>    Ecole Polytechnique Federale de Lausanne (EPFL) 2023    #> ---------------------------------------------------------- #> sparse backend #> variables n = 2, nzz(P upper triangular) = 2 #> equality constraints p = 1, nnz(A) = 2 #> inequality constraints m = 2, nnz(G) = 3 #> variable lower bounds n_lb = 1 #> variable upper bounds n_ub = 1 #>  #> iter  prim_obj       dual_obj       duality_gap   prim_inf      dual_inf      rho         delta       mu          p_step   d_step #>   0    2.43682e+00   -2.58316e+00   5.01997e+00   2.22782e+00   2.07114e+01   1.000e-06   1.000e-04   1.068e+01   0.0000   0.0000 #>   1    6.54472e+00    3.11191e+00   3.43282e+00   2.20398e-02   2.07118e-01   8.792e-08   8.792e-06   9.387e-01   0.9900   0.9900 #>   2    6.11927e+00    5.84978e+00   2.69498e-01   4.47812e-03   5.52769e-02   6.007e-09   6.007e-07   6.414e-02   0.7962   0.9607 #>   3    6.16036e+00    6.15648e+00   3.87581e-03   4.43795e-05   8.10844e-04   1.000e-10   8.432e-09   9.003e-04   0.9900   0.9870 #>   4    6.16000e+00    6.15996e+00   3.87634e-05   4.43739e-07   8.10934e-06   1.000e-10   1.000e-10   9.007e-06   0.9900   0.9900 #>   5    6.16000e+00    6.16000e+00   3.87671e-07   4.43738e-09   8.10935e-08   1.000e-10   1.000e-10   9.008e-08   0.9900   0.9900 #>   6    6.16000e+00    6.16000e+00   3.87708e-09   4.43737e-11   8.10932e-10   1.000e-10   1.000e-10   9.008e-10   0.9900   0.9900 #>  #> status:               solved #> number of iterations: 6 #> objective:            6.16000e+00 res$x #> [1] -0.6 -0.8"},{"path":"/reference/status_description.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the solver status description string â status_description","title":"Return the solver status description string â status_description","text":"Return solver status description string","code":""},{"path":"/reference/status_description.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the solver status description string â status_description","text":"","code":"status_description(code)"},{"path":"/reference/status_description.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the solver status description string â status_description","text":"code valid solver return code","code":""},{"path":"/reference/status_description.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the solver status description string â status_description","text":"status description string","code":""},{"path":"/reference/status_description.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the solver status description string â status_description","text":"","code":"status_description(1) ## for solved problem #> [1] \"Solver solved problem up to given tolerance.\" status_description(-1) ## for max iterations limit reached #> [1] \"Iteration limit was reached.\""}]
