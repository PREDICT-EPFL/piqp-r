// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// piqp_dense_solve
SEXP piqp_dense_solve(Eigen::Map<Eigen::MatrixXd> P, Eigen::Map<Eigen::VectorXd> c, Eigen::Map<Eigen::MatrixXd> A, Eigen::Map<Eigen::VectorXd> b, Eigen::Map<Eigen::MatrixXd> G, Eigen::Map<Eigen::VectorXd> h, Eigen::Map<Eigen::VectorXd> x_lb, Eigen::Map<Eigen::VectorXd> x_ub, Rcpp::List rs);
RcppExport SEXP _piqp_piqp_dense_solve(SEXP PSEXP, SEXP cSEXP, SEXP ASEXP, SEXP bSEXP, SEXP GSEXP, SEXP hSEXP, SEXP x_lbSEXP, SEXP x_ubSEXP, SEXP rsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type c(cSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type h(hSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type x_lb(x_lbSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type x_ub(x_ubSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type rs(rsSEXP);
    rcpp_result_gen = Rcpp::wrap(piqp_dense_solve(P, c, A, b, G, h, x_lb, x_ub, rs));
    return rcpp_result_gen;
END_RCPP
}
// piqp_sparse_solve
Rcpp::List piqp_sparse_solve(Eigen::Map<Eigen::SparseMatrix<double>> P, Eigen::Map<Eigen::VectorXd> c, Eigen::Map<Eigen::SparseMatrix<double>> A, Eigen::Map<Eigen::VectorXd> b, Eigen::Map<Eigen::SparseMatrix<double>> G, Eigen::Map<Eigen::VectorXd> h, Eigen::Map<Eigen::VectorXd> x_lb, Eigen::Map<Eigen::VectorXd> x_ub, Rcpp::List rs);
RcppExport SEXP _piqp_piqp_sparse_solve(SEXP PSEXP, SEXP cSEXP, SEXP ASEXP, SEXP bSEXP, SEXP GSEXP, SEXP hSEXP, SEXP x_lbSEXP, SEXP x_ubSEXP, SEXP rsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::SparseMatrix<double>> >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type c(cSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::SparseMatrix<double>> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::SparseMatrix<double>> >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type h(hSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type x_lb(x_lbSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type x_ub(x_ubSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type rs(rsSEXP);
    rcpp_result_gen = Rcpp::wrap(piqp_sparse_solve(P, c, A, b, G, h, x_lb, x_ub, rs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_piqp_piqp_dense_solve", (DL_FUNC) &_piqp_piqp_dense_solve, 9},
    {"_piqp_piqp_sparse_solve", (DL_FUNC) &_piqp_piqp_sparse_solve, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_piqp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
